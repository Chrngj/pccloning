@page "/admin/management"
@model PCGroupCloningApp.Pages.Admin.ManagementModel
@{
    ViewData["Title"] = "Management";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <h2 class="mb-4">
                <i class="fas fa-cogs"></i> Management
            </h2>

            <!-- Service Account Section -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-user-cog"></i> Service Account Configuration
                    </h5>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(Model.ServiceAccountStatus))
                    {
                        <div class="alert @(Model.ServiceAccountStatus.Contains("✅") ? "alert-success" : "alert-danger")" role="alert">
                            @Model.ServiceAccountStatus
                        </div>
                    }

                    @if (Model.HasExistingServiceAccount)
                    {
                        <div class="alert alert-info" role="alert">
                            <i class="fas fa-info-circle"></i> A service account is currently configured. You can update the credentials below.
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning" role="alert">
                            <i class="fas fa-exclamation-triangle"></i> No service account configured. The application is currently using Windows Authentication.
                        </div>
                    }

                    <!-- SERVICE ACCOUNT FORM (Separate) -->
                    <form method="post">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label asp-for="ServiceAccount.Domain" class="form-label"></label>
                                    <input asp-for="ServiceAccount.Domain" class="form-control" readonly />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label asp-for="ServiceAccount.Username" class="form-label"></label>
                                    <input asp-for="ServiceAccount.Username" class="form-control" placeholder="e.g., svc-pccloning" />
                                    <span asp-validation-for="ServiceAccount.Username" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label asp-for="ServiceAccount.Password" class="form-label"></label>
                                    <input asp-for="ServiceAccount.Password" class="form-control" />
                                    <span asp-validation-for="ServiceAccount.Password" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex gap-2">
                            <button type="submit" asp-page-handler="TestServiceAccount" class="btn btn-outline-primary">
                                <i class="fas fa-plug"></i> Test Connection
                            </button>
                            <button type="submit" asp-page-handler="SaveServiceAccount" class="btn btn-success">
                                <i class="fas fa-save"></i> Save Credentials
                            </button>
                        </div>
                    </form>

                    <div class="mt-3">
                        <small class="text-muted">
                            <i class="fas fa-info-circle"></i>
                            <strong>Requirements:</strong> Domain user account with read permissions on Computer and Group objects,
                            write permissions to modify group memberships, and permissions to move computers between OUs.
                        </small>
                    </div>
                </div>
            </div>

            <!-- OU Configuration Section -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-sitemap"></i> OU Configuration
                    </h5>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(Model.OUConfigStatus))
                    {
                        <div class="alert @(Model.OUConfigStatus.Contains("✅") ? "alert-success" : "alert-danger")" role="alert">
                            @Model.OUConfigStatus
                        </div>
                    }

                    <p class="text-muted">
                        <i class="fas fa-info-circle"></i>
                        Configure where source computers should be moved when they are replaced during PC cloning operations.
                    </p>

                    @if (!string.IsNullOrEmpty(Model.CurrentRetiredOU))
                    {
                        <div class="alert alert-info" role="alert">
                            <i class="fas fa-folder"></i>
                            <strong>Current Retired Computers OU:</strong><br>
                            <code>@Model.CurrentRetiredOU</code>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning" role="alert">
                            <i class="fas fa-exclamation-triangle"></i>
                            No retired computers OU configured. Source computers will not be moved automatically.
                        </div>
                    }

                    <!-- OU CONFIGURATION FORM (Separate) -->
                    <form method="post">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="mb-3">
                                    <label asp-for="OUConfig.RetiredComputersOU" class="form-label"></label>
                                    <input asp-for="OUConfig.RetiredComputersOU" id="ouSearch" class="form-control" placeholder="Search for OU..." autocomplete="off" />
                                    <div id="ouDropdown" class="dropdown-menu w-100" style="display: none;"></div>
                                    <span asp-validation-for="OUConfig.RetiredComputersOU" class="text-danger"></span>
                                    <div class="form-text">Search for and select the OU where retired computers should be moved.</div>
                                </div>
                            </div>
                            <div class="col-md-4 d-flex align-items-end">
                                <div class="mb-3">
                                    <button type="submit" asp-page-handler="SaveOUConfig" class="btn btn-success">
                                        <i class="fas fa-save"></i> Save OU Configuration
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Future Configuration Sections Can Be Added Here -->
            <!-- Example: Email Notifications, Backup Settings, etc. -->

        </div>
    </div>
</div>

<!-- OU Search JavaScript -->
<script>
    // OU Search functionality
    let ouSearchTimeout = null;

    document.getElementById('ouSearch').addEventListener('input', function(e) {
        const term = e.target.value;
        clearTimeout(ouSearchTimeout);

        if (term.length < 2) {
            hideOUDropdown();
            return;
        }

        ouSearchTimeout = setTimeout(async () => {
            try {
                const response = await fetch(`/api/ou/search?term=${encodeURIComponent(term)}`);
                const ous = await response.json();
                displayOUDropdown(ous);
            } catch (error) {
                console.error('Error searching OUs:', error);
            }
        }, 300);
    });

    document.getElementById('ouSearch').addEventListener('keydown', function(e) {
        const dropdown = document.getElementById('ouDropdown');
        const items = dropdown.querySelectorAll('.dropdown-item');

        if (items.length === 0) return;

        let selectedIndex = Array.from(items).findIndex(item => item.classList.contains('dropdown-item-highlighted'));

        switch (e.key) {
            case 'ArrowDown':
                e.preventDefault();
                selectedIndex = Math.min(selectedIndex + 1, items.length - 1);
                updateOUHighlight(items, selectedIndex);
                break;

            case 'ArrowUp':
                e.preventDefault();
                selectedIndex = Math.max(selectedIndex - 1, 0);
                updateOUHighlight(items, selectedIndex);
                break;

            case 'Enter':
                e.preventDefault();
                if (selectedIndex >= 0 && selectedIndex < items.length) {
                    items[selectedIndex].click();
                }
                break;

            case 'Escape':
                e.preventDefault();
                hideOUDropdown();
                break;
        }
    });

    function displayOUDropdown(ous) {
        const dropdown = document.getElementById('ouDropdown');

        if (ous.length === 0) {
            dropdown.innerHTML = '<div class="dropdown-item-text">No OUs found</div>';
        } else {
            dropdown.innerHTML = ous.map(ou =>
                `<button type="button" class="dropdown-item" onclick="selectOU('${ou.replace(/'/g, "\\'")}')">${ou}</button>`
            ).join('');
        }

        dropdown.style.display = 'block';
    }

    function selectOU(ouPath) {
        document.getElementById('ouSearch').value = ouPath;
        hideOUDropdown();
    }

    function updateOUHighlight(items, selectedIndex) {
        items.forEach(item => item.classList.remove('dropdown-item-highlighted'));

        if (selectedIndex >= 0 && selectedIndex < items.length) {
            items[selectedIndex].classList.add('dropdown-item-highlighted');
            items[selectedIndex].scrollIntoView({
                block: 'nearest',
                behavior: 'smooth'
            });
        }
    }

    function hideOUDropdown() {
        document.getElementById('ouDropdown').style.display = 'none';
    }

    // Hide dropdown when clicking outside
    document.addEventListener('click', function(e) {
        if (!e.target.closest('#ouSearch') && !e.target.closest('#ouDropdown')) {
            hideOUDropdown();
        }
    });
</script>

<style>
    .dropdown-menu {
        max-height: 200px;
        overflow-y: auto;
        z-index: 1050;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
    }

    .dropdown-item-highlighted {
        background-color: #0d6efd !important;
        color: white !important;
    }

    .dropdown-item {
        transition: background-color 0.1s ease;
        padding: 0.5rem 1rem;
        border: none;
        background: none;
        width: 100%;
        text-align: left;
    }

        .dropdown-item:hover {
            background-color: #f8f9fa;
        }

    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        border: 1px solid rgba(0,0,0,.125);
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid rgba(0,0,0,.125);
    }

    .alert {
        border: none;
        border-radius: 0.5rem;
    }

    .btn {
        border-radius: 0.375rem;
    }

    .form-control {
        border-radius: 0.375rem;
    }

    /* Font Awesome icons for better UX */
    .fas {
        margin-right: 0.5rem;
    }
</style>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}